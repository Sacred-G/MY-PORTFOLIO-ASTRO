---
import Debug from 'astro/debug';
import { join } from 'node:path';
import { readdir, stat, readFile } from 'node:fs/promises';

import ProjectItem from '../components/ProjectItem.astro';

const exists = async (path) => !!(await stat(path).catch(() => false));

const getRandomColor = () => Math.floor(Math.random() * 5) + 1;

const projectsDir = join(process.cwd(), 'src', 'projects');
const projectIds = await readdir(projectsDir);

// Filter out any non-directory files such as .DS_Store
const filteredProjectIds = projectIds.filter((projectId) => !projectId.startsWith('.'));

const projects = (
  await Promise.all(
    filteredProjectIds.map(async (projectId) => {
      const projectPath = join(projectsDir, projectId);

      try {
        const meta = JSON.parse(await readFile(join(projectPath, 'meta.json'), 'utf-8'));
        const thumbLocalPath = join(projectPath, `${projectId}.jpg`);
        const thumbPublicPath = `src/projects/${projectId}/${projectId}.jpg`;
        const imageLocalPath = join(projectPath, `image.jpg`);  // Assuming main image file is named 'image.jpg'
        const imagePath = `src/projects/${projectId}/image.jpg`;
        const imgsPath = join(projectPath, 'imgs');
        const hasThumb = await exists(thumbLocalPath);
        const hasImage = await exists(imageLocalPath);
        const images = await readdir(imgsPath)
          .then((paths) => {
            return paths.map((path) => `src/projects/${projectId}/imgs/${path}`);
          })
          .catch(() => []);

        return {
          ...meta,
          color: getRandomColor(),
          thumbPath: thumbPublicPath,
          imagePath: hasImage ? imagePath : null, // Include imagePath only if the image exists
          hasThumb,
          path: projectPath,
          images,
        };
      } catch (e) {
        console.log(e);
        return null;
      }
    })
  )
).filter(Boolean);

const projectsByCategory = projects.reduce((acc, project) => {
  if (acc[project.category] == null) acc[project.category] = [];
  acc[project.category].push({
    ...project,
    index: acc[project.category].length + 1,
  });

  return acc;
}, {});

const dict = (await import('../../public/assets/langs.json')).default;
---

<div class="project-wrapper">
  <h2 class="page-title title--padded-mobile">Projects</h2>

  {Object.entries(projectsByCategory).map(([catId, projects]) => {
    const categoryName = dict[catId]?.en;
    return (
      <div class="project__list" key={catId}>
        <h3 class="structure--animatable animation1--">{categoryName}</h3>
        <div class="project__grid clear--after">
          {projects.map((project) => (
            <ProjectItem project={project} key={project.path} />
          ))}
        </div>
      </div>
    );
  })}
</div>
